#include <iostream>

void myswap(int num1, int num2) {
	int tmp = num1;
	num1 = num2;
	num2 = tmp;
}

void pswap(int* pointer1, int* pointer2) {
	int tmp = *pointer1;
	*pointer1 = *pointer2;
	*pointer2 = tmp;
}

void p_sum_arr(int arr[], const int length, int* var);

int main() {
	setlocale(LC_ALL, "russian");
	int n, m;

	//Указатели на переменные
	n = 7;
	std::cout << "n= " << n << std::endl;
	std::cout << "&n= " << &n << std::endl; //Вывод адреса переменной n с помощью операции &
	
	//Указатель - переменная, созданная для хранения в себе адреса какой-либо области памяти.
	//Например, указатель может хранить адрес созданной ранее в программе переменной.
	

	int* pn = &n;// Создание указателя на область памяти типа int и присваивание ему значения в виде адреса n
	std::cout << "pn = " << pn << std::endl;//Вывод значения указателя(16-ричный адрес перемменой n)
	std::cout << "*pn = " << *pn << std::endl; //Вывод значения n через разыменование указателя

	
	//Разыменование(*) - операция, применяемая исключительно к указателям или адресам памяти
	//с целью обращения к тому участку памяти, на которые они направленны.
	

	*pn = 15; //Изменение значения n через разыменование указателя
	std::cout << "n = " << n << std::endl;

	std::cout << "------------------------------------------------\n";

	m = 42;
	pn = &m;
	std::cout << "m= " << m << std::endl;
	std::cout << "&m= " << &m << std::endl;

	pn = &m;//"Перенаправление" указателя на переменную m
 	std::cout << "pn = " << pn << std::endl;
	std::cout << "*pn = " << *pn << std::endl;

	int* pm = &m;
	std::cout << "pm = " << pm << std::endl;


	//Арифметика указателей - процесс перемещения указателя на другие соседние участки памяти путем приминения операции сложения и вычитания
// Формула изменения адреса: pointer + a = pointer + a * type_size
	// Указатели и массивы
	const int size = 5;
	int arr[size]{ 30, 40, 50, 60, 70 };

	int* parr2 = &arr[2];
	std::cout << parr2 << std::endl;
	std::cout << *parr2 << std::endl;
	parr2++;
	std::cout << parr2 << std::endl;
	std::cout << *parr2 << std::endl;

	parr2 = &arr[0];
	for (int i = 0; i < size; i++)
		std::cout << *(parr2 + i) << ' ';
	std::cout << std::endl;





	//Ограничеия арифметики указателей
	//1.Нельзя делить и умножать значения указателей
	//2.арифметика указателей может работать только с целыми числами
	//3.Нельзя складывать значения указателей между собой, но, можно вычитать из одного указателя другой
	//4. по отношению к указателям можно применять операции сравнения (>, <, >=, <=, ==, !=)

	//Указатели и функции
	n = 7; m = 15;
	std::cout << n << ' ' << m << std::endl;
	 // myswap(n, m); //не работает, так как параметры - это копии передаваемых значений
	pswap(&n, &m);
	std::cout << n << ' ' << m << std::endl;


	//Области применения указателей:
	//1.Реализация массивов в программирогвании;
	//2.Коссвенный дроступ к элементам за пределами их области видимости;
	//3.Экономия памяти;
	//4. Работа в динамической памятью;
	//5.Реализация полиморфизма в ооп;
	//6. сОЗДАНИЕ ДИНАМИЧЕСКИХ СТРУКТУРДАННЫХ;

	//Размер указателей в байтах не зависит от типа данных, на который они направлены. 
	// Он зависит от архитектуры системы, для которой пишется приложение,
	// Так например в ОС windows с разрядностью х32 размер указателя 4 байта, а с разрядностью х64- 8 байт.

	//Задача1.Сумма массива в указатель
	std::cout << "Задача 1.\nМассив: ";
	const int size1 = 5;
	int arr1[size1]{ 15, 5, 6, 7, 10 };
	for (int i = 0; i < size1; i++)
		std::cout << arr1[i] << ' ';
	std::cout << std::endl;
	int sum;
	p_sum_arr(arr1, size1, &sum);
	std::cout << "Сумма элементов = " << sum;


	return 0;
}

void p_sum_arr(int arr[], const int length, int*var) {
	*var = 0;
	for (int i = 0; i < length; i++)
		*var += arr[i];
}